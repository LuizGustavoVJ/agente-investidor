services:
  # Serviço de Autenticação
  auth-service:
    build: 
      context: ./services/auth-service
    ports:
      - "8001:8001"
      - "8000:8000"  # Métricas Prometheus
    environment:
      - SECRET_KEY=your-secret-key-change-in-production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - redis
      - postgres
    volumes:
      - ./services/auth-service:/app
      - ./microservices:/app/microservices
    networks:
      - agente-network
    restart: unless-stopped

  # Serviço de Dados Externos
  data-service:
    build: 
      context: ./services/data-service
    ports:
      - "8002:8002"
      - "8001:8000"  # Métricas Prometheus (porta diferente)
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - redis
    volumes:
      - ./services/data-service:/app
      - ./microservices:/app/microservices
    networks:
      - agente-network
    restart: unless-stopped

  # Analysis Service
  analysis-service:
    build:
      context: ./microservices/analysis-service
    ports:
      - "8004:8004"
    volumes:
      - ./microservices/analysis-service:/app
      - ./microservices:/app/microservices
    networks:
      - agente-network
    restart: unless-stopped

  # Methodology Service
  methodology-service:
    build:
      context: ./microservices/methodology-service
    ports:
      - "8005:8005"
    volumes:
      - ./microservices/methodology-service:/app
      - ./microservices:/app/microservices
    networks:
      - agente-network
    restart: unless-stopped

  # Banco de Dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: agente_investidor
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/databases/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - agente-network

  # Redis para Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - agente-network

  # API Gateway (Nginx)
  api-gateway:
    image: nginx:alpine
    ports:
      - "8081:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - auth-service
      - data-service
    networks:
      - agente-network

  # Prometheus para Métricas
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - agente-network

  # Grafana para Dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - agente-network

  # Elasticsearch para Logs
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - agente-network

  # Kibana para Visualização de Logs
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - agente-network

  # Logstash para Processamento de Logs
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    volumes:
      - ./infrastructure/monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./infrastructure/monitoring/logstash/config:/usr/share/logstash/config
    depends_on:
      - elasticsearch
    networks:
      - agente-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  agente-network:
    driver: bridge

