input {
  beats {
    port => 5044
  }
  
  tcp {
    port => 5000
    codec => json_lines
  }
  
  udp {
    port => 5000
    codec => json_lines
  }
}

filter {
  # Parse container logs
  if [container] {
    mutate {
      add_field => { "log_source" => "container" }
    }
    
    # Extract service name from container name
    if [container][name] {
      grok {
        match => { "[container][name]" => "(?<service_name>[a-zA-Z0-9_-]+)" }
      }
    }
  }
  
  # Parse application logs
  if [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
      target => "app_log"
    }
    
    # Extract log level
    if [app_log][level] {
      mutate {
        add_field => { "log_level" => "%{[app_log][level]}" }
      }
    }
    
    # Extract timestamp
    if [app_log][timestamp] {
      date {
        match => [ "[app_log][timestamp]", "ISO8601" ]
        target => "@timestamp"
      }
    }
    
    # Extract service information
    if [app_log][service] {
      mutate {
        add_field => { "service_name" => "%{[app_log][service]}" }
      }
    }
    
    # Extract request ID for tracing
    if [app_log][request_id] {
      mutate {
        add_field => { "trace_id" => "%{[app_log][request_id]}" }
      }
    }
    
    # Extract user information
    if [app_log][user_id] {
      mutate {
        add_field => { "user_id" => "%{[app_log][user_id]}" }
      }
    }
    
    # Extract performance metrics
    if [app_log][duration] {
      mutate {
        convert => { "[app_log][duration]" => "float" }
        add_field => { "response_time" => "%{[app_log][duration]}" }
      }
    }
    
    # Extract HTTP information
    if [app_log][http] {
      if [app_log][http][method] {
        mutate {
          add_field => { "http_method" => "%{[app_log][http][method]}" }
        }
      }
      
      if [app_log][http][status_code] {
        mutate {
          convert => { "[app_log][http][status_code]" => "integer" }
          add_field => { "http_status" => "%{[app_log][http][status_code]}" }
        }
      }
      
      if [app_log][http][path] {
        mutate {
          add_field => { "http_path" => "%{[app_log][http][path]}" }
        }
      }
    }
    
    # Extract error information
    if [app_log][error] {
      mutate {
        add_field => { "error_message" => "%{[app_log][error][message]}" }
        add_field => { "error_type" => "%{[app_log][error][type]}" }
      }
      
      if [app_log][error][stack_trace] {
        mutate {
          add_field => { "stack_trace" => "%{[app_log][error][stack_trace]}" }
        }
      }
    }
  }
  
  # Parse Nginx access logs
  if [service_name] == "nginx" {
    grok {
      match => { "message" => "%{NGINXACCESS}" }
    }
    
    if [response] {
      mutate {
        convert => { "response" => "integer" }
        add_field => { "http_status" => "%{response}" }
      }
    }
    
    if [bytes] {
      mutate {
        convert => { "bytes" => "integer" }
      }
    }
    
    if [request_time] {
      mutate {
        convert => { "request_time" => "float" }
        add_field => { "response_time" => "%{request_time}" }
      }
    }
  }
  
  # Parse PostgreSQL logs
  if [service_name] == "postgres" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{DATA:process_id}\] %{WORD:log_level}:  %{GREEDYDATA:postgres_message}" }
    }
    
    if [postgres_message] =~ /duration:/ {
      grok {
        match => { "postgres_message" => "duration: %{NUMBER:query_duration:float} ms" }
      }
    }
  }
  
  # Parse Redis logs
  if [service_name] == "redis" {
    grok {
      match => { "message" => "%{POSINT:process_id}:%{CHAR:role} %{TIMESTAMP_ISO8601:timestamp} %{CHAR:log_level} %{GREEDYDATA:redis_message}" }
    }
  }
  
  # Add environment information
  mutate {
    add_field => { "environment" => "development" }
    add_field => { "application" => "agente-investidor" }
  }
  
  # Normalize log levels
  if [log_level] {
    translate {
      field => "log_level"
      destination => "log_level_normalized"
      dictionary => {
        "DEBUG" => "debug"
        "INFO" => "info"
        "WARN" => "warning"
        "WARNING" => "warning"
        "ERROR" => "error"
        "FATAL" => "fatal"
        "CRITICAL" => "fatal"
      }
      fallback => "unknown"
    }
  }
  
  # Add geolocation for IP addresses
  if [client_ip] {
    geoip {
      source => "client_ip"
      target => "geoip"
    }
  }
  
  # Remove unnecessary fields
  mutate {
    remove_field => [ "agent", "ecs", "input", "log", "host" ]
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "agente-investidor-logs-%{+YYYY.MM.dd}"
    template_name => "agente-investidor-logs"
    template_pattern => "agente-investidor-logs-*"
    template => {
      "index_patterns" => ["agente-investidor-logs-*"]
      "settings" => {
        "number_of_shards" => 1
        "number_of_replicas" => 0
        "index.refresh_interval" => "5s"
      }
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" }
          "service_name" => { "type" => "keyword" }
          "log_level" => { "type" => "keyword" }
          "log_level_normalized" => { "type" => "keyword" }
          "message" => { "type" => "text" }
          "trace_id" => { "type" => "keyword" }
          "user_id" => { "type" => "keyword" }
          "http_method" => { "type" => "keyword" }
          "http_status" => { "type" => "integer" }
          "http_path" => { "type" => "keyword" }
          "response_time" => { "type" => "float" }
          "error_message" => { "type" => "text" }
          "error_type" => { "type" => "keyword" }
          "environment" => { "type" => "keyword" }
          "application" => { "type" => "keyword" }
        }
      }
    }
  }
  
  # Debug output (remove in production)
  stdout {
    codec => rubydebug
  }
}

